{"version":3,"file":"contentScript.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-extension/./src/contentScript/contentScript.ts"],"sourcesContent":["const sitesToFilter = [\"reddit\", \"wikipedia\"];\nfunction filterGoogleSearch() {\n    if (document.documentElement.dataset.addScript) {\n        return;\n    }\n    const searchResultsDiv = document.querySelector(\"#search\");\n    document.documentElement.dataset.addScript = \"true\";\n    const observer = new MutationObserver((mutations) => {\n        console.log(mutations);\n        // mutations.forEach(() => {\n        //   const searchResults = document.querySelectorAll(\"#search .g\")\n        //   searchResults.forEach((result) => {\n        //     const links = result.querySelectorAll(\"a\")\n        //     const cites = result.querySelectorAll(\"cite\")\n        //     if (shouldFilterResult(links, cites)) {\n        //       ;(result as HTMLElement).style.display = \"none\"\n        //     }\n        //   })\n        //   filterMoreToAskSection()\n        // })\n    });\n    //TODO add if searchResultsDiv is nothing\n    observer.observe(document.documentElement, { childList: true, subtree: true });\n    // filterMoreToAskSection()\n}\nfunction filterMoreToAskSection() {\n    const moreToAskSection = document.querySelector(\"[data-initq]\");\n    if (moreToAskSection) {\n        const accordionItems = moreToAskSection.querySelectorAll('[jsname=\"yEVEwb\"]');\n        accordionItems.forEach((item) => {\n            const links = item.querySelectorAll(\"a\");\n            const cites = item.querySelectorAll(\"cite\");\n            if (shouldFilterResult(links, cites)) {\n                ;\n                item.style.display = \"none\";\n            }\n        });\n    }\n}\nfunction shouldFilterResult(links, cites) {\n    for (const link of links) {\n        if (shouldFilterLink(link.href)) {\n            return true;\n        }\n    }\n    for (const cite of cites) {\n        if (shouldFilterLink(cite.textContent)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction shouldFilterLink(url) {\n    if (!url)\n        return false;\n    try {\n        const parsedUrl = new URL(url);\n        const hostname = parsedUrl.hostname;\n        for (const site of sitesToFilter) {\n            if (hostname.includes(site)) {\n                console.log(`Filtered: ${url} (matched: ${site})`);\n                return true;\n            }\n        }\n    }\n    catch (error) {\n        console.log(`Invalid URL: ${url}`);\n    }\n    return false;\n}\n// Check if the current URL starts with any of the keys in rules\nfunction Start() {\n    filterGoogleSearch();\n}\nStart();\n"],"names":[],"sourceRoot":""}